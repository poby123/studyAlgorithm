/*
문제
0부터 N까지의 정수 K개를 더해서 그 합이 N이 되는 경우의 수를 구하는 프로그램을 작성하시오.

덧셈의 순서가 바뀐 경우는 다른 경우로 센다(1+2와 2+1은 서로 다른 경우). 또한 한 개의 수를 여러 번 쓸 수도 있다.

입력
첫째 줄에 두 정수 N(1 ≤ N ≤ 200), K(1 ≤ K ≤ 200)가 주어진다.

출력
첫째 줄에 답을 1,000,000,000으로 나눈 나머지를 출력한다.

예제 입력 1 
20 2
예제 출력 1 
21
*/

/*
    접근: DP 문제이므로 점화식을 세우기 위해 노력하자.
    DP[K][N] : K개 더할 때 합이 N인 경우의 수로 정의해보자.

    K\N 0  1  2  3  4  5  6  7
     0: 0  0  0  0  0  0  0  0
     1: 1  1  1  1  1  1  1  1
     2: 1  2  3  4  5  6  7  8 
     3: 1  3  6 10 15 21 28 36  

    여기까지 오면 위의 2차원 배열에서, 아래의 두 가지 규칙이 보인다.
    1. DP[K][N] = DP[K-1][0] + ... + DP[K-1][N]
    2. DP[K][N] = DP[K-1][N] + DP[K][N-1]

    1번보다는 2번의 계산시간이 더 적게 걸리므로 2번 방법을 이용한다.
    점화식이 바로바로 잘 보이지는 않지만 2차원 배열에 그리는 방법을 통해, 꽤 많은 DP 문제를 풀 수 있다.
*/

#include <iostream>
#include <algorithm>
using namespace std;

#define MOD 1000000000

int N, K, dp[201][201];

int main()
{
    cin.tie(0);
    ios::sync_with_stdio(0);

    cin >> N >> K;

    fill(&dp[1][0], &dp[K][N] + 1, 1);
    
    for (int i = 2; i <= K; i++)
    {
        for (int j = 1; j <= N; j++)
        {
            dp[i][j] = (dp[i - 1][j] + dp[i][j - 1]) % MOD;
        }
    }

    cout << dp[K][N] << "\n";

    return 0;
}