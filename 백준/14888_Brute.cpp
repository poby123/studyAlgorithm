/*
문제
N개의 수로 이루어진 수열 A1, A2, ..., AN이 주어진다. 또, 수와 수 사이에 끼워넣을 수 있는 N-1개의 연산자가 주어진다. 연산자는 덧셈(+), 뺄셈(-), 곱셈(×), 나눗셈(÷)으로만 이루어져 있다.

우리는 수와 수 사이에 연산자를 하나씩 넣어서, 수식을 하나 만들 수 있다. 이때, 주어진 수의 순서를 바꾸면 안 된다.

예를 들어, 6개의 수로 이루어진 수열이 1, 2, 3, 4, 5, 6이고, 주어진 연산자가 덧셈(+) 2개, 뺄셈(-) 1개, 곱셈(×) 1개, 나눗셈(÷) 1개인 경우에는 총 60가지의 식을 만들 수 있다. 예를 들어, 아래와 같은 식을 만들 수 있다.

1+2+3-4×5÷6
1÷2+3+4-5×6
1+2÷3×4-5+6
1÷2×3-4+5+6
식의 계산은 연산자 우선 순위를 무시하고 앞에서부터 진행해야 한다. 또, 나눗셈은 정수 나눗셈으로 몫만 취한다. 음수를 양수로 나눌 때는 C++14의 기준을 따른다. 즉, 양수로 바꾼 뒤 몫을 취하고, 그 몫을 음수로 바꾼 것과 같다. 이에 따라서, 위의 식 4개의 결과를 계산해보면 아래와 같다.

1+2+3-4×5÷6 = 1
1÷2+3+4-5×6 = 12
1+2÷3×4-5+6 = 5
1÷2×3-4+5+6 = 7
N개의 수와 N-1개의 연산자가 주어졌을 때, 만들 수 있는 식의 결과가 최대인 것과 최소인 것을 구하는 프로그램을 작성하시오.

입력
첫째 줄에 수의 개수 N(2 ≤ N ≤ 11)가 주어진다. 둘째 줄에는 A1, A2, ..., AN이 주어진다. (1 ≤ Ai ≤ 100) 셋째 줄에는 합이 N-1인 4개의 정수가 주어지는데, 차례대로 덧셈(+)의 개수, 뺄셈(-)의 개수, 곱셈(×)의 개수, 나눗셈(÷)의 개수이다. 

출력
첫째 줄에 만들 수 있는 식의 결과의 최댓값을, 둘째 줄에는 최솟값을 출력한다. 연산자를 어떻게 끼워넣어도 항상 -10억보다 크거나 같고, 10억보다 작거나 같은 결과가 나오는 입력만 주어진다. 또한, 앞에서부터 계산했을 때, 중간에 계산되는 식의 결과도 항상 -10억보다 크거나 같고, 10억보다 작거나 같다.

예제 입력 1 
2
5 6
0 0 1 0
예제 출력 1 
30
30
예제 입력 2 
3
3 4 5
1 0 1 0
예제 출력 2 
35
17
예제 입력 3 
6
1 2 3 4 5 6
2 1 1 1
예제 출력 3 
54
-24
*/

#include <iostream>
#include <algorithm>
#include <climits>
using namespace std;
int *arr;
int *op;
int N;
int maxValue = INT_MIN;
int minValue = INT_MAX;

// 브루트포스이므로 재귀적으로 무식하게 푼다.
void calculate(int k, int res)
{
    // 기저사례: k가 N과 같거나 크면 종료.
    if (k >= N)
    {
        maxValue = max(maxValue, res);
        minValue = min(minValue, res);
        return;
    }

    // 연산자 종류별로 반복한다.
    for (int j = 0; j < 4; ++j)
    {
        // 쓸 수 있는 연산자가 남아있으면
        if (op[j] != 0)
        {
            --op[j];   //썼다는 표시를 해주고
            switch (j) //연산자 종류별로 연산을 달리한다.
            {
            case 0:
                res += arr[k];         // 연산 후
                calculate(k + 1, res); // 재귀함수에 남은 계산을 맡긴다.
                res -= arr[k];         // 재귀함수의 끝났을 때는, 계산이 끝났을 것이므로 결과를 원상복귀 해준다.
                break;
            case 1:
                res -= arr[k];
                calculate(k + 1, res);
                res += arr[k];
                break;
            case 2:
                res *= arr[k];
                calculate(k + 1, res);
                res /= arr[k];
                break;
            case 3:
                res /= arr[k];
                calculate(k + 1, res);
                res *= arr[k];
                break;
            }
            ++op[j]; //다시 연산할 수 있도록 표시를 지운다.
        }
    }
}

int main()
{
    scanf("%d", &N);
    arr = new int[N];
    op = new int[4];

    // 피연산자 입력받기
    for (int i = 0; i < N; ++i)
    {
        scanf("%d", arr + i);
    }
    // 각 연산자의 개수 입력받기
    scanf("%d %d %d %d", op, op + 1, op + 2, op + 3);

    // 계산하기
    calculate(1, arr[0]);

    // 계산이 끝난 후 값 출력하기
    printf("%d\n%d\n", maxValue, minValue);

    // 메모리 해제하기
    delete[] arr;
    delete[] op;
    arr = nullptr;
    op = nullptr;

    return 0;
}