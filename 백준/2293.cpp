/*
문제
n가지 종류의 동전이 있다. 각각의 동전이 나타내는 가치는 다르다. 
이 동전을 적당히 사용해서, 그 가치의 합이 k원이 되도록 하고 싶다. 
그 경우의 수를 구하시오. 각각의 동전은 몇 개라도 사용할 수 있다.

사용한 동전의 구성이 같은데, 순서만 다른 것은 같은 경우이다.

입력
첫째 줄에 n, k가 주어진다. (1 ≤ n ≤ 100, 1 ≤ k ≤ 10,000) 다음 n개의 줄에는 각각의 동전의 가치가 주어진다. 동전의 가치는 100,000보다 작거나 같은 자연수이다.

출력
첫째 줄에 경우의 수를 출력한다. 경우의 수는 2^31보다 작다.
*/

#include <iostream>
using namespace std;

int N, K, dp[10001]={1}, coins[100]; // 0원 만드는 경우의 수는 1이다.

int main()
{
    ios::sync_with_stdio(0);
    cin.tie(0);

    cin >> N >> K;
    for (int i = 0; i < N; i++)
    {
        cin >> coins[i];
    }

    for (int i = 0; i < N; i++)
    {
        for (int j = coins[i]; j <= K; j++)
        {
            dp[j] += dp[j - coins[i]];
        }
    }

    cout << dp[K];

    return 0;
}

/*
풀이

* 문제에서 사용할 수 있는 동전의 갯수에는 제한이 없다고 했다.
포인트는 동전의 갯수가 아니라 구성으로 만들 수 있는 경우의 수이다.

ex) 동전 = {1, 2, 5}, K = 10

idx 0   1   2   3   4   5   6   7   8   9   10  (k)
dp  1   0   0   0   0   0   0   0   0   0   0   (초기화)
dp  1   1   1   1   1   1   1   1   1   1   1   (1만 사용하여 k를 만들 수 있는 경우의 수 : 1원을 n번 사용)
dp  1   1   2   2   3   3   4   4   5   5   6   (1과 2를 사용하여 k를 만들 수 있는 경우의 수)
dp  1   1   2   2   3   4   5   6   7   8   10  (1, 2, 5를 모두 사용하여 k를 만들 수 있는 경우의 수)

dp[j] = dp[j] + dp[j - coins[i]]
dp[j] = (기존의 동전 종류를 이용해 k를 만드는 경우의 수) + (새 동전 종류 사용하는 경우 추가)
*/